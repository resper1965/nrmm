version: '3.8'

services:
  # Backend API
  api:
    build:
      context: ./tacticalrmm
      dockerfile: docker/containers/tactical/Dockerfile
    container_name: mrmm-backend
    environment:
      - DEBUG=0
      - POSTGRES_DB=mrmm
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - MESH_HOST=meshcentral
      - TRMM_DOMAIN=${MRMM_DOMAIN}
    volumes:
      - tactical_data:/opt/tactical
      - mongo_data:/data/db
    depends_on:
      - postgres
      - redis
      - meshcentral
    networks:
      - mrmm-network

  # Frontend
  frontend:
    build:
      context: ./tacticalrmm-web
      dockerfile: Dockerfile
    container_name: mrmm-frontend
    environment:
      - BACKEND_URL=https://api.${MRMM_DOMAIN}
    networks:
      - mrmm-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mrmm-postgres
    environment:
      - POSTGRES_DB=mrmm
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mrmm-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: mrmm-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - mrmm-network

  # Celery Worker
  celery:
    build:
      context: ./tacticalrmm
      dockerfile: docker/containers/tactical/Dockerfile
    container_name: mrmm-celery
    command: celery -A tacticalrmm worker -l info
    environment:
      - POSTGRES_DB=mrmm
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
    volumes:
      - tactical_data:/opt/tactical
    depends_on:
      - postgres
      - redis
    networks:
      - mrmm-network

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./tacticalrmm
      dockerfile: docker/containers/tactical/Dockerfile
    container_name: mrmm-celery-beat
    command: celery -A tacticalrmm beat -l info
    environment:
      - POSTGRES_DB=mrmm
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
    volumes:
      - tactical_data:/opt/tactical
    depends_on:
      - postgres
      - redis
    networks:
      - mrmm-network

  # MeshCentral
  meshcentral:
    image: typhonragewind/meshcentral:latest
    container_name: mrmm-meshcentral
    environment:
      - HOSTNAME=${MRMM_DOMAIN}
      - REVERSE_PROXY=traefik
      - MESH_SOFTWARE_NAME=m.RMM
    volumes:
      - mesh_data:/opt/meshcentral/meshcentral-data
      - mesh_backups:/opt/meshcentral/meshcentral-backups
      - mesh_files:/opt/meshcentral/meshcentral-files
    networks:
      - mrmm-network

  # NATS Server
  nats:
    image: nats:2.11.2-alpine
    container_name: mrmm-nats
    command: ["-c", "/nats-server.conf"]
    volumes:
      - ./configs/nats-server.conf:/nats-server.conf
    networks:
      - mrmm-network

  # Reverse Proxy (Traefik)
  traefik:
    image: traefik:v3.0
    container_name: mrmm-proxy
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_acme:/acme.json
    networks:
      - mrmm-network
    labels:
      - "traefik.enable=true"
      
      # Frontend
      - "traefik.http.routers.frontend.rule=Host(`${MRMM_DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      
      # API
      - "traefik.http.routers.api.rule=Host(`api.${MRMM_DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      
      # MeshCentral
      - "traefik.http.routers.mesh.rule=Host(`mesh.${MRMM_DOMAIN}`)"
      - "traefik.http.routers.mesh.entrypoints=websecure"
      - "traefik.http.routers.mesh.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mesh.service=mesh"
      - "traefik.http.services.mesh.loadbalancer.server.port=443"

volumes:
  postgres_data:
  redis_data:
  tactical_data:
  mongo_data:
  mesh_data:
  mesh_backups:
  mesh_files:
  traefik_acme:

networks:
  mrmm-network:
    driver: bridge